#!/bin/bash


## Changing PWD
cd $(dirname $0)

## For sending emails
EMAILS=

## Force to reload and update all running VMs
FORCE_UPDATE=

## Configs and Libs
source mad-gantry.conf
source ticket.conf
for func in $(ls libs/*.sh); do source $func; done

## Making dirs
[ ! -e $SHIP_DIR ] && mkdir -v $SHIP_DIR
[ ! -e $PAYLOADS_DIR ] && mkdir -v $PAYLOADS_DIR


## Set a default YML template
TEMPLATE_DIR=templates/$DEFAULT_TEMPLATE
YML_FILE=$TEMPLATE_DIR/docker-compose.yml
ALL_TEMPLATES=$(ls templates | perl -pe "s/\s/\//g" | perl -pe "s/\/$//g")

## All existing ship containers
ALL_SHIP_TEMPLATES=$(ls $SHIP_DIR | grep -v .html| perl -pe "s/\s/\//g" | perl -pe "s/\/$//g")


## container level this command uses
SITE_NAME=all
CONTAINER_LEVEL=all


usage="$0 [option]
$(basename $0), which uses docker-compose, is designed to build and run the standard HappyFace/HappyFaceMobile Monitoring systems on containers. This powerful command can easily ship many monitoring frameworks to Cloud/Cluster/WLCG environments.

 -I:  Install basic packages in this host node
 -d:  Make development environments in $PAYLOADS_DIR
 -U:  Update mad-gantry
 -E:  email addresses
 -n:  Use docker-compose no-cache option
 -u:  Update development environments, and reload all running containers. Provide a template name [$ALL_TEMPLATES]

 -t:  Select and build a template [$ALL_TEMPLATES]
 -b:  Build template

 -L:  Put a level {0|1|2|3} [default: $CONTAINER_LEVEL]
 -a:  Actions [setup/build/up/down/logs/reload/inspect]

 -D:  Set MADMASK_DEVEL in docker-compose.yml
 -i:  Select a ship image [default: $SHIP_IMAGE]
 -s:  Select a ship template [$ALL_SHIP_TEMPLATES]
 -c:  Connect a container via ssh

 -X:  Send a iPhone APK build request to OSX [$MAC_OSX]

 * Examples
 ** Build with a template [xdesktop] or a default [$DEFAULT_TEMPLATE] template images and run them
 $0 -t xdesktop -b; $0 -t xdesktop -a up
 $0 -b; $0 -a up

 ** Make all templates and run their containers
 $0 -a setup; $0 -s all -a up
 ** Run only ADC
 $0 -s ADC -a up

 ** Connect a site container via ssh
 $0 -s GoeGrid -c

 Report Bugs to Gen Kawamura <gen.kawamura@cern.ch>"

if [ $# -eq 0 ]; then
    echo "$usage"
    exit 0
fi


#--------------------------
# Functions
#--------------------------
docker_compose_action(){
    local site="$1"
    local action="$2"
    local yml_file="$3"
    [ -z "$yml_file" ] && yml_file=$YML_FILE

    ## Check requirements
    ! which docker-compose &> /dev/null && echo "docker-compose does not exist. Use -I option." && exit -1

    ## Check YML file
    [ "$action" != "setup" ] && [ ! -e $yml_file ] && echo "No YML file [$yml_file]" && return 1
    echo "YML = [$yml_file], docker-compose action = [$action]"

    case $action in
	setup)
	    [ -z "$CONTAINER_LEVEL" ] && echo "CONTAINER_LEVEL [$CONTAINER_LEVEL] is null" && return 1
	    [ "$CONTAINER_LEVEL" == "all" ] && echo "Set CONTAINER_LEVEL with -L option" && return 1
	    put_level${CONTAINER_LEVEL}_containers_onto_ship $site
	    make_kibana_payloads	  
	    ;;
	build)
	    docker-compose -f $yml_file build $DOCKER_COMPOSE_NO_CACHE
	    return $?
	    ;;
	up)
	    docker-compose -f $yml_file up -d
	    return $?
	    ;;
	down)
	    docker-compose -f $yml_file down
	    return $?
	    ;;
	logs)
	    docker-compose -f $yml_file logs
	    return $?
	    ;;
	reload)
	    docker-compose -f $yml_file ps | grep  " Up " &> /dev/null
	    [ $? -ne 0 ] && echo "[$yml_file] --> [Stopped]" && return 1
	    ## Looping until it succeeds
	    for i in $(seq 1 $DOCKER_RELOAD_TRIAL)
	    do
		echo "Reloading a VM [$(grep -B 1 image: $yml_file | perl -pe 'chomp')]"
		docker-compose -f $yml_file down
		docker-compose -f $yml_file up -d
		[ $? -eq 0 ] && return 0
		echo "Retrying [$i/$DOCKER_RELOAD_TRIAL]..."
		sleep 60
	    done
	    return 1
	    ;;
	inspect)
	    docker-compose -f $yml_file ps | grep  " Up " &> /dev/null
	    if [ $? -eq 0 ]; then
		echo "[$yml_file] --> [Running]" && return 0
	    else
		echo "[$yml_file] --> [Stopped]" && return 1
	    fi
	    ;;
	*)
	    echo "$usage"
	    exit -1
	    ;;
    esac

    return 1
}


output_docker_yml(){
    local site_names=($1)
    local hosts=($2)
    local ports=($3)
    local ship_types=($4)

    local i
    for i in $(seq 0 $((${#site_names[*]} - 1)))
    do
	local docker_yml_file=$SHIP_DIR/${site_names[$i]}/docker-compose.yml
	local site=${site_names[$i]}
	local lsite=$(echo "$site" | sed 's/\(.*\)/\L\1/')
	local host=${hosts[$i]}
	local web_port=$(($WEB_PORT_START + ${ports[$i]}))
	local mobile_port=$(($MOBILE_PORT_START + ${ports[$i]}))
	local ssh_port=$(($SSH_PORT_START + ${ports[$i]}))
	local ship_type=${ship_types[$i]}

	echo "Writing [$docker_yml_file] ($site, $host, $web_port, $mobile_port)..."
	[ ! -e $(dirname $docker_yml_file) ] && mkdir -v $(dirname $docker_yml_file)

	## Output a site YML file (docker-compose.yml for ship)
	[ -z "${ship_type}" ] && ship_type=standard
	local site_yml_template=$SHIP_COMPOSER_TEMPLATE_DIR/${ship_type}.yml
	eval echo "\"$(cat $site_yml_template)\"" > $docker_yml_file
    done

}


output_meta_meta_config(){
    local site_names=($1)
    local hosts=($2)
    local ports=($3)
    local site_dir=$4
    local meta_meta_json=$site_dir/meta-meta.json

    ## Outputting a meta_meta_config content
    [ ! -e $site_dir ] && mkdir -pv $site_dir
    if [ -z "$1" ] && [ -e $meta_meta_json ]; then
	echo "Skipping [$meta_meta_json]" && return 0
    fi

    ## Begining
    echo "Writing [$meta_meta_json] ..."
    echo "[{" > $meta_meta_json

    local i
    for i in $(seq 0 $((${#site_names[*]} - 1)))
    do

	## Main content
	local site=${site_names[$i]}
	local web_port=$(($WEB_PORT_START + ${ports[$i]}))
	local mobile_port=$(($MOBILE_PORT_START + ${ports[$i]}))

	echo "   \"name\": \"${site}\",
   \"host\": \"${hosts[$i]}\",
   \"web_port\": \"${web_port}\",
   \"mobile_port\": \"${mobile_port}\",
   \"dir\": \"sites/${site}\" " >> $meta_meta_json

	## Next
	[ $i -ne $((${#site_names[*]} - 1)) ] && echo "},{" >> $meta_meta_json
    done

    ## Ending
    echo "}]" >> $meta_meta_json

    return 0
}


copy_site_configs(){
    local level=$1
    local site_dir=$2
    local ship_name=$3
    local site=$(basename $site_dir)

    [ ! -e $site_dir ] && mkdir -pv $site_dir

    ## Copying default site configuration
    if [ -e configs/$level ]; then
	echo "Copying [$site] site configuration from [configs/$level]..."
	cp -r configs/$level/* $site_dir
    fi

    ## Overwriting by custom configurations
    if [ -e configs/customs/$site ]; then
	echo "Copying [$site] custom onfiguration from [configs/customs/$site]..."
	cp -rv configs/customs/$site/* $site_dir
    fi

    ## Applying unique configurations for this ship
    apply_custom_ship_configs $site $site_dir/config.json

    ## Applying special custom configs such as Kibana. The action is distinguished by "ship" type
    apply_special_custom_ship_configs $site $site_dir $ship_name
    
}


output_href(){
    local site="$1"
    local host="$2"
    local port="$3"

    local web_port=$(($WEB_PORT_START + ${port}))
    local mobile_port=$(($MOBILE_PORT_START + ${port}))    

    echo "<a href=\"http://$host:$web_port\">HappyFace Web: $site</a></br>"
    echo "<a href=\"http://$host:$mobile_port\">HappyFace Mobile: $site</a></br>"
}


output_ship_html(){
    echo "Outputting [$SHIP_DIR/ship.html] ..."

    ## Header
    echo "<html><header></header><body>" > $SHIP_DIR/ship.html

    ## Body
    for i in $(seq 0 $((${#ALL_SITES[*]} - 1)))
    do
	output_href "${ALL_SITES[$i]}" "${ALL_HOSTS[$i]}" "${ALL_PORTS[$i]}" >> $SHIP_DIR/ship.html
    done

    ## Footer
    echo "</body></html>" >> $SHIP_DIR/ship.html

}


## Firing all containers in a ship, when "all" is given.
gunship(){
    SITE_NAME="$1"
    local action="$2"

    [ -z "$SITE_NAME" ] && echo "SITE_NAME is empty" && return 1
    [ -z "$action" ] && echo "Action is empty" && return 1
    if [ "$SITE_NAME" == "all" ]; then
	[ $action == "setup" ] && output_ship_html
    else
	YML_FILE=$SHIP_DIR/$SITE_NAME/docker-compose.yml
	docker_compose_action $SITE_NAME $action
	return 0
    fi

    ## Level 0
    YML_FILE=$SHIP_DIR/$LEVEL0_SITE/docker-compose.yml
    CONTAINER_LEVEL=0
    docker_compose_action $LEVEL0_SITE $action

    ## Level 1
    for i in $(seq 0 $((${#LEVEL1_SITES[*]} - 1)))
    do
	YML_FILE=$SHIP_DIR/${LEVEL1_SITES[$i]}/docker-compose.yml
	CONTAINER_LEVEL=1
	docker_compose_action "${LEVEL1_SITES[$i]}" $action
    done

    ## Level 2
    for i in $(seq 0 $((${#ALL_LEVEL2_SITES[*]} - 1)))
    do
	YML_FILE=$SHIP_DIR/${ALL_LEVEL2_SITES[$i]}/docker-compose.yml
	CONTAINER_LEVEL=2
	docker_compose_action "${ALL_LEVEL2_SITES[$i]}" $action
    done

    ## Level 3
    for i in $(seq 0 $((${#ALL_LEVEL3_SITES[*]} - 1)))
    do
	YML_FILE=$SHIP_DIR/${ALL_LEVEL3_SITES[$i]}/docker-compose.yml
	CONTAINER_LEVEL=3
	docker_compose_action "${ALL_LEVEL3_SITES[$i]}" $action
    done

    return 0
}


update_by_cron_reload(){
    local base_image=$1

    ## For env of a CRON job
    source /etc/profile
    export TERM=xterm
    
    ## If payloads/devel is updated, then start rebuilding
    if prepare_madmask_devel_env || [ "$FORCE_UPDATE" == "true" ]; then

	## Set parameters
	local message_file=/tmp/mad-gantry.autobuild.log 
	local template_yml=templates/$base_image/docker-compose.yml 
	[ ! -e $template_yml ] && echo "YML: [$template_yml] does not exist" && exit -1
	
	## Sending a notification
	echo -e "$(date): Base image is [$base_image]\n\n" > $message_file
	git_last_log >> $message_file
	echo -e "\n\n" >> $message_file
	cat ship/ship.html >> $message_file
	send_email "Starting Automatic Build: [$(get_devel_branch_name)] on [$(hostname -s)]" "$(cat $message_file)" "" "$EMAILS"
	
	## Build and Reload
	echo -e "\n\n$(date): Building and reloading VMs [$base_image]" > $message_file
	docker_compose_action "" build $template_yml 2>&1 | tee -a $message_file
	gunship "all" "reload" 2>&1 | tee -a $message_file
	sleep 10

	## Inspect VMs and sending emails
	echo -e "\n\n$(date): Inspecting Running VMs" >> $message_file
	gunship "all" "inspect" 2>&1 | tee -a $message_file
	send_email "Reloaded the Running VMs: [$(get_devel_branch_name)] on [$(hostname -s)]" "$(grep -A 1000 'Inspecting R' $message_file)" "$message_file" "$EMAILS"

	## Sending logs
	sleep 1800
	git_last_log >> $message_file
	echo -e "\n\n" >> $message_file
	gunship "all" "logs" 2>&1 | tee -a $message_file
	send_email "Docker Logs from VMs: [$(get_devel_branch_name)] on [$(hostname -s)]" "$(git_last_log)" "$message_file" "$EMAILS"
    fi
}


#--------------------------
# Getopt
#--------------------------
while getopts "IdUE:nDt:ba:fu:Xi:L:s:chv" op
  do
  case $op in
      I) deploy_mailrc
	  make_swap
	  install_basic_packages
	  ;;
      d) prepare_madmask_devel_env
	  ;;
      U) echo "Updating Mad-Gantry ..."
	  git pull origin
	  ;;
      E) EMAILS="$OPTARG"
	  ;;
      n) DOCKER_COMPOSE_NO_CACHE="--no-cache"
	  ;;
      D) MADMASK_DEVEL=ON
	  ;;
      t) TEMPLATE_DIR=templates/$OPTARG
	  [ ! -e $TEMPLATE_DIR ] && echo "No template for [$TEMPLATE_DIR]" && exit -1
	  YML_FILE=$TEMPLATE_DIR/docker-compose.yml
	  ;;
      b) docker_compose_action "$SITE_NAME" build "$YML_FILE"
	  ;;
      a) generate_sshkey
	  gunship "$SITE_NAME" "$OPTARG"
	  ;;
      f) FORCE_UPDATE=true
	  ;;
      u) update_by_cron_reload $OPTARG
	  ;;
      X) send_ios_apk_build_request
	  ;;
      i) SHIP_IMAGE="$OPTARG"
	  ;;
      L) CONTAINER_LEVEL=$OPTARG
	  ;;
      s) SITE_NAME="$OPTARG"
	  ;;
      c) connect_via_ssh $SITE_NAME
	  ;;
      h) echo "$usage"
	  exit 0
	  ;;
      v) echo "$version"
	  exit 0
	  ;;
      ?) echo "$usage"
	  exit 0
	  ;;
  esac
done

