#!/bin/bash

## Check requirements
! which docker-compose &> /dev/null && echo "docker-compose does not exist" && exit -1

## Changing PWD
cd $(dirname $0)

## Configs and Libs
source mad-gantry.conf
source ticket.conf
for func in $(ls libs/*.sh); do source $func; done

## Making dirs
[ ! -e $SHIP_DIR ] && mkdir -v $SHIP_DIR
[ ! -e $PAYLOADS_DIR ] && mkdir -v $PAYLOADS_DIR


## Set a default YML template
TEMPLATE_DIR=templates/$DEFAULT_TEMPLATE
YML_FILE=$TEMPLATE_DIR/docker-compose.yml
ALL_TEMPLATES=$(ls templates | perl -pe "s/\s/\//g" | perl -pe "s/\/$//g")

## All existing ship containers
ALL_SHIP_TEMPLATES=$(ls $SHIP_DIR | perl -pe "s/\s/\//g" | perl -pe "s/\/$//g")

usage="$0 [option]

$(basename $0), which uses docker-compose, is designed to build and run the standard HappyFace/HappyFaceMobile Monitoring systems on containers. This powerful command can easily ship many monitoring frameworks to Cloud/Cluster/WLCG environments.

 -d:  Make development environments in $PAYLOADS_DIR

 -n:  Use docker-compose no-cache option
 -y:  Set a template YML file [default: $YML_FILE]
 -t:  Select a template [$ALL_TEMPLATES]
 -a:  Actions [build/up/down/logs]


 -s:  Select a ship template [$ALL_SHIP_TEMPLATES]
 -c:  Connect a container via ssh

 -A:  Put all (top, countries, sites) containers onto a ship
 -T:  Put a top container onto a ship
 -C:  Put a country container onto a ship  [country_code or all]
 -S:  Put a site container onto a a ship [site_name or all]


 * Examples

 ** Build hf.core images and run them
 $0 -a build; $0 -a up

 ** Build xdesktop images and run them
 $0 -t xdesktop -a build; $0 -t xdesktop -a up

 ** Make a Top level template and run its container
 $0 -T; $0 -s adcos -a up

 ** Make a Country level template and run its container
 $0 -C de; $0 -s de -a up

 ** Make a Site level template and run its container
 $0 -S goegrid; $0 -s goegrid -a up

 ** Connect a site container via ssh
 $0 -s goegrid -c

 Report Bugs to Gen Kawamura <gen.kawamura@cern.ch>"

if [ $# -eq 0 ]; then
    echo "$usage"
    exit 0
fi


#--------------------------
# Functions
#--------------------------
docker_compose_action(){
    case $1 in
	build)
	    docker-compose -f $YML_FILE build $DOCKER_COMPOSE_NO_CACHE
	    ;;
	up)
	    docker-compose -f $YML_FILE up -d
	    ;;
	down)
	    docker-compose -f $YML_FILE down
	    ;;
	logs)
	    docker-compose -f $YML_FILE logs
	    ;;
	*)
	    echo "$usage"
	    exit -1
	    ;;
    esac
}


output_docker_yml(){
    local site_names=($1)
    local hosts=($2)
    local ports=($3)

    local i
    for i in $(seq 0 $((${#site_names[*]} - 1)))
    do
	local docker_yml_file=$SHIP_DIR/${site_names[$i]}/docker-compose.yml
	local host=${hosts[$i]}
	local web_port=$(($WEB_PORT_START + ${ports[$i]}))
	local mobile_port=$(($MOBILE_PORT_START + ${ports[$i]}))
	local ssh_port=$(($SSH_PORT_START + ${ports[$i]}))

	echo "Writing [$docker_yml_file] ($host, $web_port, $mobile_port)..."
	[ ! -e $(dirname $docker_yml_file) ] && mkdir -v $(dirname $docker_yml_file)

	## Output minimum site configuration
	echo "version: \"2.0\"
services:

 # Mad-Gantry Ship Platform
 ${site_names[$i]}:
  image: $SHIP_IMAGE
  ports:
    - \"${web_port}:$DEFAULT_WEB_PORT\"
    - \"${mobile_port}:$DEFAULT_MOBILE_PORT\"
    - \"${ssh_port}:$DEFAULT_SSH_PORT\"
  volumes: 
    - \"$PWD/$PAYLOADS_DIR/sites/${site_names[$i]}:$PAYLOAD_SITES/${site_names[$i]}\"
    - \"$PWD/$PAYLOADS_DIR/data:$PAYLOAD_DATA\"
    - \"$PWD/$PAYLOADS_DIR/devel:$PAYLOAD_DEVEL\"
    - \"$PWD/$PAYLOADS_DIR/ssh:/root/.ssh\"
" > $docker_yml_file
    done

}


output_meta_meta_config(){
    local site_names=($1)
    local hosts=($2)
    local ports=($3)
    local site_dir=$4
    local meta_meta_json=$site_dir/meta-meta.json

    ## Outputting a meta_meta_config content
    [ ! -e $site_dir ] && mkdir -pv $site_dir
    if [ -z "$1" ] && [ -e $meta_meta_json ]; then
	echo "Skipping [$meta_meta_json]" && return 0
    fi

    ## Begining
    echo "Writing [$meta_meta_json] ..."
    echo "[{" > $meta_meta_json

    local i
    for i in $(seq 0 $((${#site_names[*]} - 1)))
    do

	## Main content
	local web_port=$(($WEB_PORT_START + ${ports[$i]}))
	local mobile_port=$(($MOBILE_PORT_START + ${ports[$i]}))

	echo "   \"name\": \"${site_names[$i]}\",
   \"host\": \"${hosts[$i]}\",
   \"web_port\": \"${web_port}\",
   \"mobile_port\": \"${mobile_port}\",
   \"dir\": \"sites/${site_names[$i]}\" " >> $meta_meta_json

	## Next
	[ $i -ne $((${#site_names[*]} - 1)) ] && echo "},{" >> $meta_meta_json
    done

    ## Ending
    echo "}]" >> $meta_meta_json

    return 0
}


copy_site_configs(){
    local level=$1
    local site_dir=$2
    local site=$(basename $site_dir)

    [ ! -e $site_dir ] && mkdir -pv $site_dir

    ## Copying default site configuration
    if [ -e configs/$level ]; then
	echo "Copying [$site] site configuration from [configs/$level]..."
	cp -r configs/$level/* $site_dir
    fi

    ## Overwriting by custom configurations
    if [ -e configs/customs/$site ]; then
	echo "Copying [$site] custom onfiguration from [configs/customs/$site]..."
	cp -rv configs/customs/$site/* $site_dir
    fi
}


output_href(){
    local site="$1"
    local host="$2"
    local port="$3"

    local web_port=$(($WEB_PORT_START + ${port}))
    local mobile_port=$(($MOBILE_PORT_START + ${port}))    

    echo "<a href=\"http://$host:$web_port\">HappyFace Web: $site</a></br>"
    echo "<a href=\"http://$host:$mobile_port\">HappyFace Mobile: $site</a></br>"
}


output_ship_html(){
    echo "Outputting [$SHIP_DIR/ship.html] ..."

    ## Header
    echo "<html><header></header><body>" > $SHIP_DIR/ship.html

    ## Level 0
    output_href "$LEVEL0_SITE" "$LEVEL0_HOST" "$LEVEL0_PORT" >> $SHIP_DIR/ship.html

    ## Level 1
    for i in $(seq 0 $((${#LEVEL1_SITES[*]} - 1)))
    do
	output_href "${LEVEL1_SITES[$i]}" "${LEVEL1_HOSTS[$i]}" "${LEVEL1_PORTS[$i]}" >> $SHIP_DIR/ship.html
    done

    ## Level 2
    for i in $(seq 0 $((${#ALL_LEVEL2_SITES[*]} - 1)))
    do
	output_href "${ALL_LEVEL2_SITES[$i]}" "${ALL_LEVEL2_HOSTS[$i]}" "${ALL_LEVEL2_PORTS[$i]}" >> $SHIP_DIR/ship.html
    done

    ## Footer
    echo "</body></html>" >> $SHIP_DIR/ship.html

}


#--------------------------
# Getopt
#--------------------------
while getopts "dnt:a:y:ATC:S:s:chv" op
  do
  case $op in
      d) prepare_madmask_devel_env
	  ;;
      n) DOCKER_COMPOSE_NO_CACHE="--no-cache"
	  ;;
      t) TEMPLATE_DIR=templates/$OPTARG
	  [ ! -e $TEMPLATE_DIR ] && echo "No template for [$TEMPLATE_DIR]" && exit -1
	  YML_FILE=$TEMPLATE_DIR/docker-compose.yml
	  ;;
      y) YML_FILE=$OPTARG
	  ;;
      a) generate_sshkey
	  docker_compose_action $OPTARG
	  ;;
      A) put_level0_container_onto_ship
	  put_level1_containers_onto_ship all
	  put_level2_containers_onto_ship all
	  output_ship_html
	  ;;
      T) put_level0_container_onto_ship
	  ;;
      C) put_level1_containers_onto_ship $OPTARG
	  ;;
      S) put_level2_containers_onto_ship $OPTARG
	  ;;
      s) 
	  SITE_NAME=$OPTARG
	  TEMPLATE_DIR=$SHIP_DIR/$SITE_NAME
	  [ ! -e $TEMPLATE_DIR ] && echo "No template for [$TEMPLATE_DIR]" && exit -1
	  YML_FILE=$TEMPLATE_DIR/docker-compose.yml
	  ;;
      c)  connect_via_ssh $SITE_NAME
	  ;;
      h) echo "$usage"
	  exit 0
	  ;;
      v) echo "$version"
	  exit 0
	  ;;
      ?) echo "$usage"
	  exit 0
	  ;;
  esac
done



