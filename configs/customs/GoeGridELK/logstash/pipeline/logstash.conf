input {
  file {
    path => "/billing/**/billing-20*"
    #sincedb_path => "/var/tmp/sincedb-dcache"
    sincedb_path => "/dev/null"
    # uncomment next line if you want to import existing data
    start_position => beginning
    # uncomment next line to import files with logstash 2.2.x
    # ignore_older => 0
    type => "dcache-billing"
  }
}

filter {

  if "RemoveFiles=" in [message] {
  # Because RemoveFiles= is the only(source needed) non-conforming event.
    grok {
      patterns_dir => "/usr/share/logstash/patterns"
      match => [ "message", "%{REMOVE_ON_POOL}" ]
      named_captures_only => true
      tag_on_failure => [ "_parse_dcache_failure10" ]
    } # End of grok
    mutate {
      split => [ "pnfsids", "," ]
      add_tag => [ "dcache_billing_removed" ]
    } # End of Mutate to make a real list of the entries in pnfsids

  } else {

    grok {
      patterns_dir => "/usr/share/logstash/patterns"
      match => [ "message", "%{TRANSFER_CLASSIC}" ]
      match => [ "message", "%{STORE_CLASSIC}" ]
      match => [ "message", "%{RESTORE_CLASSIC}" ]
      match => [ "message", "%{REQUEST_CLASSIC}" ]
      #match => [ "message", "%{REQUEST_DCAP}" ]
      match => [ "message", "%{REMOVE_CLASSIC}" ]
      match => [ "message", "%{REMOVE_SRM}" ]
      match => [ "message", "%{POOL_WARNING}" ]
      named_captures_only => true
      remove_field => [ "message" ]
      tag_on_failure => [ "_parse_dcache_failure00" ]

    }

  } # End of if else

  ## Taking "year" from billing file name
  grok {
    match => ["path", "/billing/%{YEAR:billing_year}/.*/billing-.*"]
  }

  ## Adding billing_year to billing_time 
  mutate {
    update => { "billing_time" => "%{billing_year}.%{billing_time}" }
  }

  ## Set datetime here
  date {
    match => [ "billing_time", "YYYY.MM.dd HH:mm:ss" ]
    timezone => "CET"
    remove_field => [ "billing_time" ]
  }

  ## Geo Location
  if [remote_host] {
   geoip {
   	source => "remote_host"
   }

   mutate {
      convert => {"[geoip][location][lat]" => "float"}
      convert => {"[geoip][location][lon]" => "float"}
   }
  }


}

output {
  elasticsearch {
    hosts => "__SITE__elasticsearch:9200"
    index => "dcache-billing-%{billing_year}.%{+MM}"
    template_name => "billing"
    #protocol => "http"
  }
}
